import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useState } from 'react';
import {
  SSRProvider,
  Provider,
  defaultTheme,
  Grid,
  View,
  Item,
  Tabs, TabList, TabPanels
} from "@adobe/react-spectrum";
import { today } from "@internationalized/date";
import clientPromise from "../mongodb";
import { OptionsPicker } from "../components/OptionsPicker";
import { FixtureTable } from "../components/FixtureTable";
import { Itinerary } from "../components/Itinerary";
import { findFixtureRange, sortByDates } from "../components/utils.js";
import { leagueOptions } from "../components/utils.js";

export async function getServerSideProps({
  query: {
    startDate = today().toString(),
    endDate = today().toString(),
    leagueArr = [""]
  }
}) {

  console.clear();
  console.log('getServerSideProps | startDate: ' + startDate);
  console.log('getServerSideProps | endDate: ' + endDate);
  console.log('getServerSideProps | leagueArr: ' + leagueArr);
  console.log('getServerSideProps | leagueOptions: ' + JSON.stringify(leagueOptions) + '\n');

  if (typeof leagueArr === "string") {
    leagueArr = leagueArr.split(",");
  }

  let selectedMatchesArr = [];
  for (const leagueValue of leagueArr) {
    for (const leagueOptionsObj of leagueOptions) {
      if (leagueOptionsObj.value === leagueValue) {
        console.log(leagueValue + ' | ' + leagueOptionsObj.label);
        selectedMatchesArr.push({ label: leagueOptionsObj.label, value: leagueValue})
      }
    }
  }

  const client = await clientPromise;
  const db = client.db("football_advisor");
  const coll = await db.collection("fixtures");

  let startTime = Date.now();
  console.log('\nLoading fixtures for ' + JSON.stringify(leagueArr));

  const rawData = await db
    .collection("fixtures")
    .find({ leagueId: { $in: leagueArr } })
    .toArray();

  let footballData = [];
  let venueArray = [];
  let leagueStartDate = new Date(startDate);
  let leagueEndDate = new Date(endDate);

  let elapsedTime = (Date.now() - startTime)/1000;
  console.log('\tElapsed time: ' + elapsedTime + ' sec');

  for (let i = 0; i < rawData.length; i++) {
    let startingFixture = findFixtureRange(rawData[i], leagueStartDate);
    let endingFixture = findFixtureRange(rawData[i], leagueEndDate);
    for (let j = startingFixture; j < endingFixture; j++) {
      sortByDates(footballData, rawData[i].dataSet[j], venueArray);
    }
  }

  var query = [
    {$match: {"id": {$in: venueArray}}},
    {$addFields: {"__venueData": {$indexOfArray: [venueArray, "$id" ]}}},
    {$sort: {"__venueData": 1}}
   ];

  startTime = Date.now(); 
  console.log('\nQUERY: ' + JSON.stringify(query));
  const venues = await db.collection("top_venues").aggregate( query ).toArray();

  elapsedTime = (Date.now() - startTime)/1000;
  console.log('\tElapsed time: ' + elapsedTime + ' sec');

  let venueData = JSON.stringify(venues);

  return {
    props: {
      footballData,
      venueData,
      startDate,
      endDate,
      leagueArr,
      selectedMatchesArr
    }
  };
}

export default function Home({ footballData, venueData, startDate, endDate, leagueArr, selectedMatchesArr }) {
  const [selectedFixtures, setSelectedFixtures] = useState([]);
  const [progressMsg, setProgressMsg] = useState('');
  let [selectedKeys, setSelectedKeys] = useState(new Set([]));

  
  return (
    <SSRProvider>
      <Provider theme={defaultTheme} colorScheme="light">
        <Head>
          <title>Football Advisor</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className={styles.title}>Welcome to Football Advisor</div>
      <Tabs 
          aria-label="placeholder"
          width="99%" 
          margin="size-150">
          <TabList>
            <Item key="FoR" textValue="FoR"><div className="Home">Select matches</div></Item>
            <Item key="MaR" textValue="MaR">Itinerary</Item>
          </TabList>
          <TabPanels>
            <Item key="FoR">
              <div className={styles.main}>
                <Grid
                  areas={['optionsPicker optionsPicker optionsPicker progressSection',
                          'fixtureTable fixtureTable fixtureTable fixtureTable',
                          'footer footer footer footer']}
                  columns={['1fr','1fr', '1fr', '1fr']}
                  rows={['3vh','68vh','auto']}
                  height='95vh'
                  gap='size-250'
                  margin='1vh'
                >
                  <View gridArea="optionsPicker">
                    <div className={styles.pickerGrid}>
                      <OptionsPicker
                        startDateIn={startDate}
                        endDateIn={endDate}
                        leagueArrIn={leagueArr}
                        selectedMatchesArr={selectedMatchesArr}
                        setProgressMsg={setProgressMsg}
                      />
                    </div>
                  </View>

                  <View gridArea="progressSection">
                    <div className={styles.progressSection}>
                      <div>{progressMsg}</div>
                    </div>
                  </View>

                  <View gridArea="fixtureTable">
                    <div className={styles.fixtureTable}>
                      <FixtureTable 
                        footballData={footballData} 
                        venueData={venueData}
                        setSelectedFixtures={setSelectedFixtures}
                        selectedKeys={selectedKeys}
                        setSelectedKeys={setSelectedKeys}
                        />
                    </div>

                  </View>
                  <View gridArea="footer">
                    <footer className={styles.footer}>
                      <a
                        href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        Powered by{" "}
                          <Image
                            src="/vercel.svg"
                            alt="Vercel Logo"
                            width={72}
                            height={16}
                          />
                      </a>
                    </footer>
                  </View>
                </Grid>
              </div>
              </Item>

              <Item key="MaR">
                <View gridArea="itinerary">
                  <Itinerary 
                    selectedFixtures={selectedFixtures}/>
                </View>
              </Item>
            </TabPanels>
        </Tabs>
      </Provider>
    </SSRProvider>
  );
}
